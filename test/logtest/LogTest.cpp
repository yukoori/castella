#include <iostream>

#include "SCLogger.h"
#include "SCFileStream.h"

#include "LogTestTask.h"

int main(int argc, char* argv[])
{
	SCFileStream stream;
#if defined(_WIN32) || defined(_WIN64)
	stream.path(SCTEXT(".\\"));
#else	// defined(_WIN32) || defined(_WIN64)
	stream.path(SCTEXT("./"));
#endif	// defined(_WIN32) || defined(_WIN64)
	stream.componet(SCTEXT("dslogtest"));
	stream.setFormatSpecifier();

	SCLogger logger;
	logger.setLevel(ELogLevel::SC_E_LOG_DEBUG);
	logger.addStream(&stream);
	// logger.setFormatSpecifier();

	// iostream ???
	// logger.level(DS_E_LOG_DEBUG) << "Test DEBUG String." << 11 << 1.02;

	// ???????? ???
	SCLOG(logger, ELogLevel::SC_E_LOG_INFO, SCTEXT("%s"), SCTEXT("Test INFO String."));
	SCLOG(logger, ELogLevel::SC_E_LOG_ERROR, SCTEXT("%s"), SCTEXT("Test ERROR String."));
	SCLOG(logger, ELogLevel::SC_E_LOG_WARNING, SCTEXT("%s"), SCTEXT("Test WARNING String."));
	
	SCLOG(logger, ELogLevel::SC_E_LOG_WARNING, SCTEXT("%s"), SCTEXT("30820429308203110201003048310B3009060355040613024B52310E300C060355040A0C054D6F746965310C300A060355040B0C03446576311B301906035504030C12447265616D5F43657274544553545F30303130820122300D06092A864886F70D01010105000382010F003082010A0282010100C8438051CE008EB2A97393AD2F1950AEB31FB5E6F82B87DA41AED1FAC2695C4795BADB8FAFF6FD751F39C875B580ABBDE04178E841688D2AF48EA650D2D9737337CC0D012E3528491C67951541AB257EA9AAAAB9F9D3AB3B81DBB89CBDE07E8E10C5B739BDB471FEEBC6231705EB590AC573622B317CB9CDAE542C52262043A975B45D4E68D3DB0B48884D63F2BF4B129A05B4CB90BE9EEEC3B60CF7FAB9FC260A0504CFA26369B6EE1D057F1ADF40E047759199629EE2D27394570D22EF04490A33B9412F4EC5DFD9A4D788CFE471962E779EAF06EC1D3ACF0ECBEA662F21636039334F2BF601228CF423641F6F0F6698EC895187F3712DF80FB6A110B95DED0203010001A082019A30820196060A2A831A8C9A440A0101023182018630820182A10D300B0609608648016503040201A20F300D06092A864886F70D0101010500A3583056303E310B3009060355040613024B52310E300C060355040A0C054D6F746965310C300A060355040B0C034465763111300F06035504030C084D6F74696520434102140191FCC6579B56153566BFEC3CD0C9ED8103E189A482010404820100CF36226709756BFB13D2EA6217961704BAFE6C47E3BFEB4E2C4C1C73C3E7C219CC92B75CEBD9FE9B8C27D0D338D02B0277B0C367C439DE0F1154CC0399BF6A0DA5DC3CDA2B67DE61CC8D81E27CB946B81BEB45A324168D1B995CBEDFDB03EDB1EA77EC884ED8F14E900D57352A334CA3C53060B3F1471A3F1ED42C9A96FF39E38DDD3484FDFC3DD17CF9C385C2C99F63C0FAE906CC2B8B4228B5750F8216035D9E2CDC980B24506F2A37CF4C3625456722EF26FF1FBAD1E61045D2CADFF35EA1AFCC1608494CE48C39C6EBAAE340644F1396EB5C745DA82040CA6B43E25D587699346D20D1859F789466361A2FCBBDB1787F2442545FA70487690F56EC3F5BDA300D06092A864886F70D01010B050003820101007C2B16CE50C82BD9B37573F99AFD5CCE7488D6424F079A5037935D41221ED6C49236653579AB1D60C7ED75C11420DC9357428191C9EBDBC021ABABD225B09FF146307994ACF169EB97DD1D3952F148F5CFF415D9429DA9B7920E3CAC9C42BCD1321E436960C9A9EE12F3C4AC5E35E4659DA17C82EB9C041AAB165BA454451AD371CDC3A8948F7CDDD0A04151D352B227C913D9B71683D79EB2FCBEF021296C873A83F5A6B3B8DBEF3D64B18E625E5869731D7B243EC7F27ADD7DEA130199445F1DA93972E1AF493CF5CB4637D353A6852301F3178BEEBD55B5F2463D792EFC768C6046D8EC2F49FBA6578671F281C8E2EBF8635A26F6FA9FEF8839472A587180"));

	// multi thread ????
	std::vector<LogTestTask*> vTask;
	for (int i = 0; i < 10; ++i)
	{
		LogTestTask* pTask = new LogTestTask;
		if (pTask == NULL)
		{
			continue;
		}

		pTask->setLogger(logger);
		pTask->setSid(i);

		if (pTask->Open() != 0)
		{
			continue;
		}

		vTask.push_back(pTask);
	}

	std::vector<LogTestTask*>::iterator iter_s = vTask.begin();
	std::vector<LogTestTask*>::iterator iter_e = vTask.end();
	for (; iter_s != iter_e; ++iter_s)
	{
		LogTestTask* pTask = (*iter_s);
		if (pTask == NULL)
		{
			continue;
		}

		SCLOG(logger, ELogLevel::SC_E_LOG_INFO, SCTEXT("==============> Start Close Thread!!!"));
		pTask->Close(); 
		SCLOG(logger, ELogLevel::SC_E_LOG_INFO, SCTEXT("==============> End Close Thread!!!"));
		delete (*iter_s);
		SCLOG(logger, ELogLevel::SC_E_LOG_INFO, SCTEXT("==============> Delete Object!!!"));
	}
	vTask.clear();

	return 0;
}
